# Copyright (c) 2024 Baidu, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
import os
import unittest
from typing import Any, Dict, List, Optional, Callable

from appbuilder.utils.tool_definition_docstring import (
    get_docstring_view,
    _parse_function_doc,
    _parse_function_description_from_docstrings,
    _find_and_parse_params_from_docstrings,
    _get_function_docs,
    _parse_params,
    DocstringsFormat
)

@unittest.skipUnless(os.getenv("TEST_CASE", "UNKNOWN") == "CPU_PARALLEL", "")
class TestToolDefinitionDocstring(unittest.TestCase):
# Generated by vscode plugin
# https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring
    def pep257_style(
        name: str,
        *args,
        val: str = None,
        val_obj: Optional[Any] = None,
        data: Dict[str, int] = None,
        **kwargs,
    ) -> str:
        """_summary_

        Arguments:
            name -- _description_

        Keyword Arguments:
            val -- _description_ (default: {None})
            val_obj -- _description_ (default: {None})
            data -- _description_ (default: {None})

        Returns:
            _description_
        """
        return ""


    def test_google_style():
        # Generated by vscode plugin
        # https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring
        def google_style(
            name: str,
            /,
            *args,
            val: str = None,
            val_obj: Optional[Any] = None,
            val_list: List[str] = None,
            data: Dict[str, int] = None,
            **kwargs,
        ) -> str:
            """Google style docstring.

            Args:
                name (str): Name of object.
                *args: Variable length argument list.
                val (str, optional): Value of obj. Defaults to None.
                val_obj (Optional[Any], optional): Real object reference. Defaults to None.
                val_list (List[str], optional): List of items with object. Defaults to None.
                data (Dict[str, int], optional): Data along with object. Defaults to None.
                **kwargs: Arbitrary keyword arguments.

            Returns:
                str: Styled string.
            """
            return ""

        doc = _get_function_docs(google_style)
        params, returns = _find_and_parse_params_from_docstrings(docstring=doc, format=DocstringsFormat.GOOGLE)

        assert params
        assert params["name"]
        assert params["name"]["type"] == "str"
        assert params["name"]["description"] == "Name of object."
        assert params["name"]["required"] is True
        assert params["args"]
        assert params["args"]["type"] == ""
        assert params["args"]["description"] == "Variable length argument list."
        assert params["args"]["required"] is True
        assert params["val"]
        assert params["val"]["type"] == "str"
        assert params["val"]["description"] == "Value of obj. Defaults to None."
        assert params["val"]["required"] is False
        assert params["val_obj"]
        assert params["val_obj"]["type"] == "Optional[Any]"
        assert params["val_obj"]["description"] == "Real object reference. Defaults to None."
        assert params["val_obj"]["required"] is False
        assert params["val_list"]
        assert params["val_list"]["type"] == "List[str]"
        assert params["val_list"]["description"] == "List of items with object. Defaults to None."
        assert params["val_list"]["required"] is False
        assert params["data"]
        assert params["data"]["type"] == "Dict[str, int]"
        assert params["data"]["description"] == "Data along with object. Defaults to None."
        assert params["data"]["required"] is False
        assert params["kwargs"]
        assert params["kwargs"]["type"] == ""
        assert params["kwargs"]["description"] == "Arbitrary keyword arguments."
        assert params["kwargs"]["required"] is True
        assert returns
        assert returns["type"] == "str"
        assert returns["description"] == "Styled string."
        assert returns["required"] is True


    def test_google_style_bad_args_return_dict():
        def func(
            bad_param: str,
            bad_generic_param: List[str],
            bad_format: int,
            val: str = None,
        ) -> Dict[str, str]:
            """Google style docstring.

            Args:
                bad param (str): Bad parameter, name contains whitespace.
                bad_generic_param (List<str>): Bad generic parameter, use <> instead of []
                bad_format (int) Bad arg doc format, lost :.
                val (str    ,      optional): Value of obj. Defaults to None.

            Returns:
                Dict[str, str]: Returns a dict.
            """
            return ""

        doc = _get_function_docs(func)
        params, returns = _find_and_parse_params_from_docstrings(docstring=doc, format=DocstringsFormat.GOOGLE)

        assert params
        assert params["val"]
        assert params["val"]["type"] == "str"
        assert params["val"]["description"] == "Value of obj. Defaults to None."
        assert params["val"]["required"] is False
        assert returns
        assert returns["type"] == "Dict[str, str]"
        assert returns["description"] == "Returns a dict."
        assert returns["required"] is True


    def test_google_style_no_return():
        def func(
            name: str,
        ):
            """Google style docstring.

            Args:
                name (str): Name of object.

            """
            return ""

        doc = _get_function_docs(func)
        params, returns = _find_and_parse_params_from_docstrings(docstring=doc, format=DocstringsFormat.GOOGLE)

        assert params
        assert params["name"]
        assert params["name"]["type"] == "str"
        assert params["name"]["description"] == "Name of object."
        assert params["name"]["required"] is True
        assert returns == {}


    def test_google_style_no_args_no_return():
        def func(
            name: str,
            /,
            *args,
            val: str = None,
            val_obj: Optional[Any] = None,
            data: Dict[str, int] = None,
            **kwargs,
        ) -> str:
            """Google style docstring."""
            return ""

        doc = _get_function_docs(func)
        params, returns = _find_and_parse_params_from_docstrings(docstring=doc, format=DocstringsFormat.GOOGLE)

        assert params == {}
        assert returns == {}


    def test_no_doc():
        def func(
            name: str,
            /,
            *args,
            val: str = None,
            val_obj: Optional[Any] = None,
            data: Dict[str, int] = None,
            **kwargs,
        ) -> str:
            return ""

        doc = _get_function_docs(func)

        assert doc is None

    #my test
    def sample_func(self, x: int, y: str) -> str:
        """Sample function to test parsing.

        Args:
            x (int): The first parameter.
            y (str): The second parameter.

        Returns:
            str: The result of the function.
        """
        return f"{x} {y}"

    def empty_doc_func(self):
        """ """
        pass

    def no_params_func(self) -> int:
        """Function with no parameters.

        Returns:
            int: An integer result.
        """
        return 0

    def test_get_docstring_view(self):
        doc_params, doc_returns = get_docstring_view(self.sample_func, DocstringsFormat.GOOGLE, False)
        self.assertIn("x", doc_params)
        self.assertEqual(doc_params["x"]["type"], "int")
        self.assertEqual(doc_params["x"]["required"], True)
        self.assertIn("y", doc_params)
        self.assertEqual(doc_params["y"]["type"], "str")
        self.assertIn("type", doc_returns)
        self.assertEqual(doc_returns["type"], "str")

        # Test with disable_docstring=True
        doc_params, doc_returns = get_docstring_view(self.sample_func, DocstringsFormat.GOOGLE, True)
        self.assertEqual(doc_params, {})
        self.assertEqual(doc_returns, {})

    def test_parse_function_doc(self):
        docstring = self.sample_func.__doc__
        result = _parse_function_doc(docstring)
        self.assertIn("Sample function to test parsing.", result)
        self.assertIn("Args:", result)

    def test_parse_function_description_from_docstrings(self):
        docstring = self.sample_func.__doc__
        result = _parse_function_description_from_docstrings(docstring)
        self.assertEqual(result, "Sample function to test parsing.")

        # Test empty docstring
        self.assertIsNone(_parse_function_description_from_docstrings(""))

    def test_find_and_parse_params_from_docstrings(self):
        docstring = self.sample_func.__doc__
        params, returns = _find_and_parse_params_from_docstrings(docstring, DocstringsFormat.GOOGLE)
        self.assertIn("x", params)
        self.assertEqual(params["x"]["type"], "int")
        self.assertEqual(params["x"]["description"], "The first parameter.")
        self.assertIn("y", params)
        self.assertEqual(params["y"]["type"], "str")
        self.assertEqual(params["y"]["description"], "The second parameter.")
        self.assertEqual(returns["type"], "str")
        self.assertEqual(returns["description"], "The result of the function.")

        # Test with no parameters or return in docstring
        empty_params, empty_returns = _find_and_parse_params_from_docstrings(self.no_params_func.__doc__, DocstringsFormat.GOOGLE)
        self.assertEqual(empty_params, {})
        self.assertEqual(empty_returns["type"], "int")

    def test_parse_params(self):
        docstring = self.sample_func.__doc__
        args_section_start = r"(^|\n)(Args|Arguments|Parameters)\s*:?\s*\n"
        args_section_end = r"(^|\n)(Returns|Ret)\s*:?\s*\n"
        param_start = r"(^|\n)\s+(?P<name>[a-zA-Z_][a-zA-Z0-9_]*)\s*(\((?P<type>[^\)]*)\))?\s*:\s*(?=[^\n]+)"
        params = _parse_params(
            docstring,
            args_section_start,
            args_section_end,
            param_start,
            has_name=True
        )
        self.assertIn("x", params)
        self.assertEqual(params["x"]["type"], "int")
        self.assertEqual(params["x"]["description"], "The first parameter.")
        self.assertIn("y", params)
        self.assertEqual(params["y"]["type"], "str")
        self.assertEqual(params["y"]["description"], "The second parameter.")

        # Test when regex does not match any params
        empty_params = _parse_params("", args_section_start, args_section_end, param_start, has_name=True)
        self.assertEqual(empty_params, {})

    def test_docstring_formats(self):
        # Test different formats
        numpy_docstring = """Function with Numpy format.

        Parameters
        ----------
        x : int
            The first parameter.
        y : str
            The second parameter.

        Returns
        -------
        str
            The result of the function.
        """
        params, returns = _find_and_parse_params_from_docstrings(numpy_docstring, DocstringsFormat.NUMPY)
        self.assertIn("x", params)
        self.assertEqual(params["x"]["type"], "int")
        self.assertEqual(params["x"]["description"], "The first parameter.")
        self.assertEqual(returns["type"], "str")

        # Sphinx format example
        sphinx_docstring = """Function with Sphinx format.

        :param x: The first parameter.
        :type x: int
        :param y: The second parameter.
        :type y: str
        :returns: The result of the function.
        :rtype: str
        """
        params, returns = _find_and_parse_params_from_docstrings(sphinx_docstring, DocstringsFormat.SPHINX)
        self.assertIn("x", params)
        self.assertEqual(params["x"]["type"], "int")
        self.assertEqual(params["x"]["description"], "The first parameter.")
        self.assertEqual(returns["type"], "str")

if __name__ == '__main__':
    unittest.main()